{"version":3,"sources":["../src/delta_ctrl.js"],"names":["SingleStatCtrl","moment","_","$","kbn","TimeSeries","DeltaPluginCtrl","$scope","$injector","$rootScope","panelDefaults","links","datasource","maxDataPoints","interval","targets","cacheTimeout","dayInterval","hourInterval","minuteInterval","defaults","panel","scope","addEditorTab","unitFormats","getUnitFormats","subItem","format","value","render","Promise","resolve","reject","length","$q","when","scopedVars","Object","assign","text","intervalMs","metricsQuery","panelId","id","range","rangeRaw","renderer","resolution","dayI","date","hourI","hour","minuteI","minute","thisMonth","to","beginThisMonth","startOf","lastMonth","subtract","beginLastMonth","metricCop","from","query","then","res1","title","res2","catch","err","results","setTimeQueryEnd","loading","data","error","Error","message","datapoints","result","subscribe","handleDataStream","dashboard","snapshot","snapshotData","console","log","events","emit","templateUrl"],"mappings":"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","file":"delta_ctrl.js","sourcesContent":["import {SingleStatCtrl} from 'app/plugins/panel/singlestat/module';\n\nimport moment from 'moment';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport 'jquery.flot';\nimport 'jquery.flot.gauge';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series2';\n\nexport class DeltaPluginCtrl extends SingleStatCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    var panelDefaults = {\n      links: [],\n      datasource: null,\n      maxDataPoints: 100,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n      dayInterval: 'NOW',\n      hourInterval: 'NOW',\n      minuteInterval: 'NOW',\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    this.scope = $scope;\n\n  }\n\n  onInitEditMode() {\n    super.onInitEditMode();\n    this.addEditorTab('Delta Config', 'public/plugins/grafana-delta-panel/delta_config.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    super.setUnitFormat();\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  issueQueries(datasource) {\n    return new Promise((resolve, reject) => {\n      this.datasource = datasource;\n\n      if (!this.panel.targets || this.panel.targets.length === 0) {\n        return this.$q.when([]);\n      }\n\n      // make shallow copy of scoped vars,\n      // and add built in variables interval and interval_ms\n      var scopedVars = Object.assign({}, this.panel.scopedVars, {\n        \"__interval\":     {text: this.interval,   value: this.interval},\n        \"__interval_ms\":  {text: this.intervalMs, value: this.intervalMs},\n      });\n\n      var metricsQuery = {\n        panelId: this.panel.id,\n        range: this.range,\n        rangeRaw: this.rangeRaw,\n        interval: this.interval,\n        intervalMs: this.intervalMs,\n        targets: this.panel.targets,\n        format: this.panel.renderer === 'png' ? 'png' : 'json',\n        maxDataPoints: this.resolution,\n        scopedVars: scopedVars,\n        cacheTimeout: this.panel.cacheTimeout\n      };\n\n      const dayI = this.panel.dayInterval === 'NOW' ? moment().date() : this.panel.dayInterval;\n      const hourI = this.panel.hourInterval === 'NOW' ? moment().hour() : this.panel.hourInterval;\n      const minuteI = this.panel.minuteInterval === 'NOW' ? moment().minute() : this.panel.minuteInterval;\n\n      const thisMonth = moment(metricsQuery.range.to).date(dayI).hour(hourI).minute(minuteI);\n      const beginThisMonth = moment(thisMonth).startOf('month');\n      const lastMonth = moment(thisMonth).subtract(1, 'month');\n      const beginLastMonth = moment(lastMonth).startOf('month');\n\n      const metricCop = Object.assign({}, metricsQuery);\n      metricsQuery.rangeRaw.from = beginThisMonth;\n      metricsQuery.rangeRaw.to = thisMonth;\n      return datasource.query(metricsQuery)\n      .then((res1) => {\n        metricCop.rangeRaw.from = beginLastMonth;\n        metricCop.rangeRaw.to = lastMonth;\n        this.panel.title = `Delta ${beginLastMonth.format('DD-MM hh-mm-ss a')} / ${lastMonth.format('DD-MM hh-mm-ss a')} - ${beginThisMonth.format('DD-MM hh-mm-ss a')} / ${thisMonth.format('DD-MM hh-mm-ss a')}`;\n        return datasource.query(metricCop)\n        .then((res2) => resolve([res1, res2]))\n        .catch((err) => reject(err));\n      })\n      .catch((err) => reject(err));\n    });\n  }\n\n  handleQueryResult(results) {\n    this.setTimeQueryEnd();\n    this.loading = false;\n\n    if (results[0].data.length <= 0 || results[1].data.length <= 0) {\n      let error = new Error();\n      error.message = 'Not enougth series error';\n      error.data = '0 query entered';\n      throw error;\n    }\n    results[0].data[0].datapoints[0][0] -= results[1].data[0].datapoints[0][0]\n    var result = results[0];\n\n    // check for if data source returns subject\n    if (result && result.subscribe) {\n      this.handleDataStream(result);\n      return;\n    }\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = {data: []};\n    }\n\n    return this.events.emit('data-received', result.data);\n  }\n}\n\nDeltaPluginCtrl.templateUrl = 'module.html';\n"]}